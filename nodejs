5.question
5.	Create an Express.js application to simulate a simple task management system. Each task should have an id, title, description, and a status field (e.g., “pending”, “in-progress”, “completed”). Initialize the application with at least two tasks in an in-memory array.

a.	The application must implement the following functionality using appropriate HTTP methods:
b.	GET /tasks: Return the list of all tasks.
c.	GET /tasks/:id: Return details of a task by its ID.
d.	POST /tasks: Accept a new task's title and description from the request body, assign a unique ID, default the status to “pending”, and add it to the array.
e.	PUT /tasks/:id: Allow the user to update any of the task fields (title, description, or status). Only the provided fields should be updated.
f.	DELETE /tasks/:id: Remove a task by its ID. If the task doesn't exist, return a 404 error.
g.	Ensure use of express.json() middleware for parsing input, and use res.send() for all output messages.


import express from 'express';
const app = express();
const PORT = 3000;
// Use JSON middleware
app.use(express.json());

// In-memory task array with initial data
let tasks = [
  { id: 1, title: 'Learn Express', description: 'Study basic Express.js routing', status: 'pending' },
  { id: 2, title: 'Buy Groceries', description: 'Milk, Bread, Eggs', status: 'in-progress' }
];

// Generate unique IDs
let nextId = 3;

// GET /tasks – return all tasks
app.get('/tasks', (req, res) => {
  res.send(tasks);
});

// GET /tasks/:id – return a task by ID
app.get('/tasks/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const task = tasks.find(t => t.id === id);
  if (!task) return res.status(404).send('Task not found');
  res.send(task);
});

// POST /tasks – create a new task
app.post('/tasks', (req, res) => {
  const { title, description } = req.body;
  if (!title || !description) {
    return res.status(400).send('Title and description are required');
  }

  const newTask = {
    id: nextId++,
    title,
    description,
    status: 'pending'
  };
  tasks.push(newTask);
  res.send(newTask);
});

// PUT /tasks/:id – update task fields
app.put('/tasks/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const task = tasks.find(t => t.id === id);
  if (!task) return res.status(404).send('Task not found');

  const { title, description, status } = req.body;

  if (title !== undefined) task.title = title;
  if (description !== undefined) task.description = description;
  if (status !== undefined) task.status = status;

  res.send(task);
});

// DELETE /tasks/:id – delete a task
app.delete('/tasks/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const index = tasks.findIndex(t => t.id === id);
  if (index === -1) return res.status(404).send('Task not found');

  const deletedTask = tasks.splice(index, 1)[0];
  res.send(deletedTask);
});

// Start server
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});

/*
GET /books — lists all books (in plain text)

POST /books with JSON body { "title": "...", "author": "..." } — adds a book

PUT /books/:id with JSON body (any of {title, author}) — updates a book partially

DELETE /books/:id — deletes a book by ID*/
---------------------------------------------------------------------------------------
3. Create a New Request in Postman
Click New > HTTP Request or just open a new tab.

4. Test API Endpoints
a) GET all tasks
Method: GET

URL: http://localhost:3000/tasks

Click Send

You should get a JSON array of all tasks.

b) GET a task by ID
Method: GET

URL: http://localhost:3000/tasks/1 (replace 1 with any task ID)

Click Send

You’ll get the task with ID=1 or a 404 error if not found.

c) POST a new task
Method: POST

URL: http://localhost:3000/tasks

Go to Body tab > select raw > choose JSON from dropdown

Enter JSON data like:

json
Copy
Edit
{
  "title": "New Task",
  "description": "This is a new task description"
}
Click Send

You’ll get the newly created task back with id and default status: "pending".

d) PUT to update a task
Method: PUT

URL: http://localhost:3000/tasks/1 (replace 1 with your task ID)

Body > raw > JSON, e.g.:

json
Copy
Edit
{
  "status": "completed",
  "description": "Updated description"
}
Click Send

Only provided fields are updated.

e) DELETE a task
Method: DELETE

URL: http://localhost:3000/tasks/1 (replace 1 with task ID)

Click Send

You’ll get the deleted task returned or a 404 if the task wasn’t found.
